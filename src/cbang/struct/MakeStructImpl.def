/******************************************************************************\

          This file is part of the C! library.  A.K.A the cbang library.

                Copyright (c) 2003-2024, Cauldron Development LLC
                               All rights reserved.

         The C! library is free software: you can redistribute it and/or
        modify it under the terms of the GNU Lesser General Public License
       as published by the Free Software Foundation, either version 2.1 of
               the License, or (at your option) any later version.

        The C! library is distributed in the hope that it will be useful,
          but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
                 Lesser General Public License for more details.

         You should have received a copy of the GNU Lesser General Public
                 License along with the C! library.  If not, see
                         <http://www.gnu.org/licenses/>.

        In addition, BSD licensing may be granted on a case by case basis
        by written permission from at least one of the copyright holders.
           You may request written permission by emailing the authors.

                  For information regarding this software email:
                                 Joseph Coffland
                          joseph@cauldrondevelopment.com

\******************************************************************************/

#include <cbang/String.h>
#include <cbang/SStream.h>
#include <cbang/Exception.h>

#include <iomanip>

using namespace std;
using namespace cb;


namespace CBANG_STRUCT_NAMESPACE {
  CBANG_STRUCT_CLASS::CBANG_STRUCT_CLASS() :
    CBANG_STRUCT_ENUM()
#ifdef CBANG_STRUCT_MARK_DIRTY
    , dirty(false)
#endif
#define CBANG_ITEM(NAME, MNAME, TYPE, INIT, PRINT, PARSE) \
    , NAME(INIT)
#include CBANG_STRUCT_DEF
#undef CBANG_ITEM
  {}


  const char *CBANG_STRUCT_CLASS::getMemberName(unsigned index) {
    switch (index) {
#define CBANG_ITEM(NAME, MNAME, TYPE, INIT, PRINT, PARSE) \
      case CBANG_CONCAT(INDEX_, MNAME): return #MNAME;
#include CBANG_STRUCT_DEF
#undef CBANG_ITEM
    default: THROW("Invalid member index " << index << " to structure "
                    CBANG_STRING(CBANG_STRUCT_NAME));
    }
  }


  bool CBANG_STRUCT_CLASS::hasMember(const string &name) {
#define CBANG_ITEM(NAME, MNAME, TYPE, INIT, PRINT, PARSE) \
    if (name == #MNAME) return true;
#include CBANG_STRUCT_DEF
#undef CBANG_ITEM
    return false;
  }


  bool CBANG_STRUCT_CLASS::hasMemberCI(const string &name) {
    string lName = String::toLower(name);

#define CBANG_ITEM(NAME, MNAME, TYPE, INIT, PRINT, PARSE) \
    if (lName == String::toLower(#MNAME)) return true;
#include CBANG_STRUCT_DEF
#undef CBANG_ITEM
    return false;
  }


  string CBANG_STRUCT_CLASS::toString(unsigned index) const {
    switch (index) {
#define CBANG_ITEM(NAME, MNAME, TYPE, INIT, PRINT, PARSE) \
      case CBANG_CONCAT(INDEX_, MNAME): return SSTR(PRINT NAME);
#include CBANG_STRUCT_DEF
#undef CBANG_ITEM
    default: THROW("Invalid member index " << index << " to structure "
                    CBANG_STRING(CBANG_STRUCT_NAME));
    }
  }


  void CBANG_STRUCT_CLASS::parse(unsigned index, const string &value) {
    switch (index) {
#define CBANG_ITEM(NAME, MNAME, TYPE, INIT, PRINT, PARSE) \
      case CBANG_CONCAT(INDEX_, MNAME): NAME = PARSE(value); break;
#include CBANG_STRUCT_DEF
#undef CBANG_ITEM
    default: THROW("Invalid member index " << index << " to structure "
                    CBANG_STRING(CBANG_STRUCT_NAME));
    }
  }


  ostream &CBANG_STRUCT_CLASS::print(ostream &stream, unsigned index) const {
    switch (index) {
#define CBANG_ITEM(NAME, MNAME, TYPE, INIT, PRINT, PARSE) \
      case CBANG_CONCAT(INDEX_, MNAME): return stream << PRINT NAME;
#include CBANG_STRUCT_DEF
#undef CBANG_ITEM
    default: THROW("Invalid member index " << index << " to structure "
                    CBANG_STRING(CBANG_STRUCT_NAME));
    }
  }


  ostream &CBANG_STRUCT_CLASS::print(ostream &stream) const {
    return stream
#define CBANG_ITEM(NAME, MNAME, TYPE, INIT, PRINT, PARSE) \
      << setw(CBANG_STRUCT_NAME_WIDTH) << #MNAME " " << PRINT NAME << '\n'
#include CBANG_STRUCT_DEF
#undef CBANG_ITEM
      ;
  }
}
