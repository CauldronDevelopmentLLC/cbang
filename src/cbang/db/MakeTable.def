/******************************************************************************\

          This file is part of the C! library.  A.K.A the cbang library.

                Copyright (c) 2003-2019, Cauldron Development LLC
                   Copyright (c) 2003-2017, Stanford University
                               All rights reserved.

         The C! library is free software: you can redistribute it and/or
        modify it under the terms of the GNU Lesser General Public License
       as published by the Free Software Foundation, either version 2.1 of
               the License, or (at your option) any later version.

        The C! library is distributed in the hope that it will be useful,
          but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
                 Lesser General Public License for more details.

         You should have received a copy of the GNU Lesser General Public
                 License along with the C! library.  If not, see
                         <http://www.gnu.org/licenses/>.

        In addition, BSD licensing may be granted on a case by case basis
        by written permission from at least one of the copyright holders.
           You may request written permission by emailing the authors.

                  For information regarding this software email:
                                 Joseph Coffland
                          joseph@cauldrondevelopment.com

\******************************************************************************/

#include <cbang/SmartPointer.h>

#include <cbang/db/TableDef.h>
#include <cbang/db/Statement.h>

#include <cbang/util/MacroUtils.h>

#include <string>

// Check defines
#ifndef DB_TABLE_NAME
#error DB_TABLE_NAME undefined
#endif

// Defaults
#ifndef DB_TABLE_CONSTRAINTS
#define DB_TABLE_CONSTRAINTS
#endif
#ifndef DB_TABLE_ROW
#define DB_TABLE_ROW DB_TABLE_NAME
#endif
#ifndef DB_TABLE_PATH
#define DB_TABLE_PATH cbang/db
#endif

// Defines
#define DB_TABLE_CLASS CBANG_CONCAT(DB_TABLE_NAME, Table)
#define DB_TABLE_DEF <DB_TABLE_PATH/DB_TABLE_CLASS.h>

// Table Class
namespace cb {
  namespace DB {
    class Database;
    class Parameter;
    class Column;
  }
}


#ifdef DB_TABLE_NAMESPACE
namespace DB_TABLE_NAMESPACE {
#endif
#ifdef DB_TABLE_NAMESPACE2
  namespace DB_TABLE_NAMESPACE2 {
#endif

    class DB_TABLE_CLASS : public cb::DB::TableDef {
    public:
      DB_TABLE_CLASS();

      static std::string toString(const DB_TABLE_ROW &row, unsigned i);

      static void bind(const DB_TABLE_ROW &row,
                       const cb::DB::Parameter &parameter, unsigned i);
      static void bindWriteStmt(const cb::SmartPointer<cb::DB::Statement> &
                                writeStmt, const DB_TABLE_ROW &row);
      static void readRow(const cb::SmartPointer<cb::DB::Statement> &readStmt,
                          DB_TABLE_ROW &row);
    };

#ifdef DB_TABLE_NAMESPACE2
  }
#endif
#ifdef DB_TABLE_NAMESPACE
}
#endif



// Cleanup
#ifndef DB_TABLE_IMPL

#undef DB_TABLE_NAME

#ifdef DB_TABLE_NAMESPACE
#undef DB_TABLE_NAMESPACE
#endif

#ifdef DB_TABLE_NAMESPACE2
#undef DB_TABLE_NAMESPACE2
#endif

#undef DB_TABLE_CONSTRAINTS
#undef DB_TABLE_ROW
#undef DB_TABLE_PATH
#undef DB_TABLE_CLASS
#undef DB_TABLE_DEF
#ifdef DB_TABLE_ROW_DIRECT
#undef DB_TABLE_ROW_DIRECT
#endif // DB_TABLE_ROW_DIRECT

#endif // !DB_TABLE_IMPL
