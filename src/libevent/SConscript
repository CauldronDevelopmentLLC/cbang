Import('*')
env = env.Clone()


# sys/timerfd.h
def CheckSYS_TIMERFD_H(ctx):
    src = '''
      #include <sys/types.h>
      #include <sys/timerfd.h>
      int main(int argc, char **argv) {return 0;}
    '''
    ctx.Message('Checking for C header file sys/timerfd.h...')
    result = ctx.TryCompile(src + '\n', '.c')
    ctx.Result(result)
    return result

conf.AddTest('CheckSYS_TIMERFD_H', CheckSYS_TIMERFD_H)


# sizeof
# https://github.com/scons/scons/wiki/AutoconfRecipes#ac_check_sizeof
# Sensible default for common types on common platforms.
_DEFAULTS_SIZEOF = {
    'short' : [2],
    'int' : [4, 2],
    'long' : [4, 8],
    'long long' : [8, 4],
    'unsigned short' : [2],
    'unsigned int' : [4, 2],
    'unsigned long' : [4, 8],
    'unsigned long long' : [8, 4],
    'float' : [4],
    'double' : [8],
    'long double' : [12],
    'size_t' : [4, 8],
}

def CheckSizeOf(ctx, type, includes = None):
    """This check can be used to get the size of a given type,
    or to check whether the type is of expected size.

    Arguments:
        - type : str
            the type to check
        - includes : sequence
            list of headers to include in the test code before testing the type
        Returns:
                status : int
                        0 if the check failed, or the found size of the type
                        if the check succeeded."""
    minsz = 0
    maxsz = 16

    src = '''
      #include <sys/types.h>
      #include <stdlib.h>
      #include <stdio.h>
      #include <stdint.h>
    '''
    if includes:
        src += "\n".join("#include <%s>\n" % i for i in includes)

    ext = '.c'
    # test code taken from autoconf: this is a pretty clever hack to find that
    # a type is of a given size using only compilation. This speeds things up
    # quite a bit compared to straightforward code using TryRun
    src += r"""
typedef %s scons_check_type;

int main()
{
    static int test_array[1 - 2 * ((long int) sizeof(scons_check_type) > %d)];
    test_array[0] = 0;

    return 0;
}
"""

    # Only check if the given size is the right one
    ctx.Message('Checking size of %s ... ' % type)

    # Try sensible defaults first
    try:
        szrange = _DEFAULTS_SIZEOF[type]
    except KeyError:
        szrange = []
    szrange.extend(range(minsz, maxsz))
    st = 0

    # Actual test
    for sz in szrange:
        st = ctx.TryCompile(src % (type, sz), ext)
        if st:
            break

    if st:
        ctx.Result('%d' % sz)
        return sz
    else:
        ctx.Result('Failed !')
        return 0

conf.AddTest('CheckSizeOf', CheckSizeOf)


# decl
def CheckDecl(ctx, decl, includes = None):
    src = '''
      #ifndef %s
      #error %s not defined
      #endif
      int main() {return 0;}
    ''' % (decl, decl)

    if includes is not None:
        for inc in includes:
            src = '#include <%s>\n%s' % (inc, src)

    ctx.Message('Checking for decl ' + decl + '... ')
    ret = ctx.TryRun(src + '\n', '.c')
    ctx.Result(ret[0])
    return ret[0]

conf.AddTest('CheckDecl', CheckDecl)


# Structs
def CheckStruct(ctx, struct, includes = None):
    src = 'int main() {struct %s *x = 0; x = x; return 0;}' % struct

    if includes is not None:
        for inc in includes:
            src = '#include <%s>\n%s' % (inc, src)

    ctx.Message('Checking for struct ' + struct + '... ')
    ret = ctx.TryRun(src + '\n', '.c')
    ctx.Result(ret[0])
    return ret[0]

conf.AddTest('CheckStruct', CheckStruct)


# Types
def CheckType(ctx, type, includes = None, defs = None):
    src = 'int main() {%s *x = 0; x = x; return 0;}' % type

    if includes is not None:
        for inc in includes:
            src = '#include <%s>\n%s' % (inc, src)

    if defs is not None:
        for d in defs:
            src = '#define %s\n%s' % (d, src)

    ctx.Message('Checking for type ' + type + '... ')
    ret = ctx.TryRun(src + '\n', '.c')
    ctx.Result(ret[0])
    return ret[0]

conf.AddTest('CheckType', CheckType)


# Struct member
def CheckStructMember(ctx, struct, member, includes = None):
    src = '''
      int main() {
        struct %s a, b;
        a.%s = b.%s;
        a = a;
        b = b;
        return 0;
      }
    ''' % (struct, member, member)

    if includes is not None:
        for inc in includes:
            src = '#include <%s>\n%s' % (inc, src)

    ctx.Message('Checking for %s in struct %s... ' % (member, struct))
    ret = ctx.TryRun(src + '\n', '.c')
    ctx.Result(ret[0])
    return ret[0]

conf.AddTest('CheckStructMember', CheckStructMember)


# General compile and run check
def CheckRun(ctx, msg, src):
    ctx.Message('Checking for %s... ' % msg)
    ret = ctx.TryRun(src + '\n', '.c')
    ctx.Result(ret[0])
    return ret[0]

conf.AddTest('CheckRun', CheckRun)


# event-config.h
defs = {}
functions = '''accept4 arc4random arc4random_buf clock_gettime epoll_create
  epoll_create1 eventfd getaddrinfo getegid geteuid getifaddrs getprotobynumber
  getservbyname gettimeofday inet_ntop inet_pton issetugid kqueue
  mach_absolute_time mmap nanosleep pipe pipe2 poll select sendfile sigaction
  strlcpy strtok_r strtoll sysctl timerfd_create usleep vasprintf
'''
headers = '''arpa/inet.h fcntl.h ifaddrs.h inttypes.h mach/mach_time.h
  netdb.h netinet/in6.h netinet/in.h netinet/tcp.h stdarg.h stddef.h stdint.h
  stdlib.h sys/eventfd.h sys/ioctl.h sys/mman.h sys/queue.h
  sys/select.h sys/sendfile.h sys/socket.h sys/stat.h sys/sysctl.h sys/time.h
  sys/timerfd.h sys/types.h sys/uio.h unistd.h
'''
decls = '''CTL_KERN KERN_ARND KERN_RANDOM RANDOM_UUID'''
structs = 'addrinfo in6_addr sockaddr_in6 sockaddr_storage'
sizeof = ['int', 'long', 'long long', 'off_t', 'short', 'size_t', 'void *']

gethostbyname_r_3_arg_src = '''
  #define _BSD_SOURCE
  #include <netdb.h>
  int main(int argc, char **argv) {
    struct hostent ent;
    struct hostent_data data;
    int err = gethostbyname_r("", &ent, &data);
    return 0;
  }
'''

gethostbyname_r_5_arg_src = '''
  #define _BSD_SOURCE
  #include <netdb.h>
  int main(int argc, char **argv) {
    char buf[1];
    struct hostent *ent;
    struct hostent hostent;
    int err;
    ent = gethostbyname_r("", &hostent, buf, sizeof(buf), &err);
    return 0;
  }
'''

gethostbyname_r_6_arg_src = '''
  #define _BSD_SOURCE
  #include <netdb.h>
  int main(int argc, char **argv) {
    char buf[1];
    struct hostent *ent;
    struct hostent hostent;
    int err = gethostbyname_r("", &hostent, buf, sizeof(buf), &ent, &err);
    return 0;
  }
'''

def get_event_config_defs():
    # TODO Define EVENT__HAVE_WORKING_KQUEUE if kqueue works correctly w/ pipes

    # to_def
    try:
        from string import maketrans
    except ImportError:
        def maketrans(_from, _to): return ''.maketrans(_from, _to)

    trans = maketrans('/. *', '___P')

    def to_def(name):
        return name.upper().translate(trans)


    # Functions
    for func in functions.split():
        if conf.CBCheckFunc(func): defs['HAVE_' + to_def(func)] = '1'


    # Headers
    for hdr in headers.split():
      if conf.CBCheckCHeader(hdr): defs['HAVE_' + to_def(hdr)] = '1'

    if conf.CheckSYS_TIMERFD_H(): defs['HAVE_SYS_TIMERFD_H'] = '1'


    # Sizes
    for type in sizeof:
        size = conf.CheckSizeOf(type)
        if size:
            defs['SIZEOF_' + to_def(type)] = size

    size = conf.CheckSizeOf('pthread_t', ['pthread.h'])
    if size: defs['SIZEOF_PTHREAD_T'] = size


    # Decls
    for decl in decls.split():
        if conf.CheckDecl(decl, 'unistd.h stdlib.h'.split()):
            defs['HAVE_DECL_' + decl] = '1'

    if conf.CheckDecl('F_SETFD', ['fcntl.h']):
        defs['HAVE_SETFD'] = '1'

    if conf.CheckDecl('TAILQ_FOREACH', ['sys/queue.h']):
        defs['HAVE_TAILQFOREACH'] = '1'

    for decl in 'timeradd timerclear timerisset'.split():
        if conf.CheckDecl(decl, ['sys/time.h']):
            defs['HAVE_' + decl] = '1'


    # Structs
    for struct in structs.split():
        if conf.CheckStruct(struct, ['sys/socket.h', 'sys/types.h']):
            defs['HAVE_STRUCT_' + to_def(struct)] = '1'


    # Struct members
    if conf.CheckStructMember('sockaddr_in6', 'sin6_len', ['netinet/in.h']):
        defs['HAVE_STRUCT_SOCKADDR_IN6_SIN6_LEN'] = '1'

    if conf.CheckStructMember('sockaddr_storage', 'ss_family',
                              ['sys/socket.h']):
        defs['HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY'] = '1'

    if conf.CheckStructMember('sockaddr_storage', '__ss_family',
                              ['sys/socket.h']):
        defs['HAVE_STRUCT_SOCKADDR_STORAGE___SS_FAMILY'] = '1'


    # Types
    for type in 'uint32_t uint64_t uint8_t uintptr_t'.split():
        if conf.CheckType(type, ['stdint.h']):
            defs['HAVE_' + to_def(type)] = '1'

    if conf.CheckType('sa_family_t', ['sys/socket.h']):
            defs['HAVE_SA_FAMILY_T'] = '1'

    if conf.CheckType('fd_mask', ['sys/select.h'], ['_GNU_SOURCE']):
            defs['HAVE_FD_MASK'] = '1'


    # epoll
    if 'HAVE_EPOLL_CREATE' in defs: defs['HAVE_EPOLL'] = '1'

    # gethostbyname_r
    if conf.CheckRun('3 arg gethostbyname_r()', gethostbyname_r_3_arg_src):
        defs['HAVE_GETHOSTBYNAME_R_3_ARG'] = '1'

    if conf.CheckRun('5 arg gethostbyname_r()', gethostbyname_r_5_arg_src):
        defs['HAVE_GETHOSTBYNAME_R_5_ARG'] = '1'

    if conf.CheckRun('6 arg gethostbyname_r()', gethostbyname_r_6_arg_src):
        defs['HAVE_GETHOSTBYNAME_R_6_ARG'] = '1'


    # OpenSSL
    if conf.CBCheckLib('ssl') and conf.CBCheckLib('crypto') and \
            conf.CBCheckCHeader('openssl/ssl.h'):
        defs['HAVE_OPENSSL'] = '1'

    # Pthreads
    if conf.CBCheckLib('pthread') and conf.CBCheckCHeader('pthread.h'):
        defs['HAVE_PTHREADS'] = '1'

    # Version
    defs['VERSION'] = '"2.1.4-alpha-dev"'
    defs['NUMERIC_VERSION'] = '0x02010401'

    return defs


def build_function(target, source, env):
    target = str(target[0])

    if env['PLATFORM'] == 'darwin': defs['HAVE_FD_MASK'] = '1'

    f = open(target, 'w')

    f.write('#ifndef EVENT2_EVENT_CONFIG_H_INCLUDED_\n')
    f.write('#define EVENT2_EVENT_CONFIG_H_INCLUDED_\n')

    for name, value in sorted(defs.items()):
        f.write('#define EVENT__%s %s\n' % (name, value))

    f.write('#endif /* EVENT2_EVENT_CONFIG_H_INCLUDED_ */\n')
    f.close()


bld = Builder(action = build_function)
env.Append(BUILDERS = {'LibEventConfig' : bld})

config = None
if env['PLATFORM'] != 'win32':
    defs = get_event_config_defs()
    config = env.LibEventConfig('#/include/event2/event-config.h', [])
    env.AlwaysBuild(config)


# Warnings
if env.get('compiler_mode', '') == 'gnu':
    env.Append(CCFLAGS = ["-Wno-parentheses-equality", "-Wno-unused-function"])

# Source
src = Glob('src/*.c')
inc = Glob('include/event2/*.h')
env.Append(CPPPATH = ['include'])

# OpenSSL
if not env.CBConfigEnabled('openssl'):
    src = list(filter(lambda f: not 'openssl' in f.path, src))

# libkern
conf.CBCheckLib('kern')


# Install headers
copy = env.Install(dir = '#/include/event2', source = inc)
copy += env.Install(dir = '#/include', source = Glob('include/*.h'))


# Windows
if env['PLATFORM'] == 'win32':
    src += Glob('win32/*.c')
    copy += env.Install(dir = '#/include/event2',
                        source = File('win32/event2/event-config.h'))
    copy += env.Install(dir = '#/include/sys',
                        source = File('include/sys/queue.h'))
    env.Append(CPPPATH = ['src'])


# Bulid library
lib = env.Library('#/lib/event', src)
Depends(lib, copy)
if env['PLATFORM'] != 'win32' and config is not None: Depends(lib, config)

Return('lib')
